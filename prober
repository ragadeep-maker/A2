#!/usr/bin/env python
import sys,easysnmp,time
from easysnmp import Session

#%%%%%% importing functions %%%%%%%%%#

# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#


cl_terms = sys.argv
choosen_cl_terms = cl_terms[1]
cl_details = choosen_cl_terms.split(':')
snmp_agent_ip = cl_details[0]
port_number = cl_details[1]
community_type = cl_details[2]
frequency_of_samples = cl_terms[2]
number_of_samples = int(cl_terms[3])
time_of_sampling = 1/float(frequency_of_samples)

oids = []
past_list_oids = []
present_list_oids = []

# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#

for k in range(4,len(cl_terms)):
	oids.append(cl_terms[k])
oids.insert(0,'1.3.6.1.2.1.1.3.0')

# %Counting oids given in CL%

def prober_snmp():
    global present_list_oids
    global present_occurance_time

    session = Session(hostname=snmp_agent_ip,remote_port=port_number,community=community_type,version=2,timeout=1,retries=1)
    observed_oids = session.get(oids)
    past_list_oids = []

    for k in range(1,len(observed_oids)):
        if observed_oids[k].value!= 'NOSUCHOBJECT' and observed_oids[k].value!='NOSUCHINSTANCE':
            past_list_oids.append(int(observed_oids[k].value))
            if count !=0 and len(present_list_oids)>0:
                calculated_oid = int(past_list_oids[k-1])-int(present_list_oids[k-1])
                overall_time = round(occured_time-present_occurance_time,1)
                calculated_rate_oid = int(calculated_oid/overall_time)
                if calculated_rate_oid < 0:
                    if observed_oids[k].snmp_type == 'COUNTER32':
                        calculated_oid = calculated_oid + 2**32
                        print(str(occured_time)+"|"+str(calculated_oid/overall_time)+"|")
                    elif observed_oids[k].snmp_type == 'COUNTER64':
                        calculated_oid = calculated_oid + 2**64
                        print(str(occured_time)+"|"+str(calculated_oid/overall_time)+"|")
                else:
                    print(str(occured_time)+"|"+str(calculated_rate_oid)+"|")
    present_list_oids = past_list_oids
    present_occurance_time = occured_time
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#	
	

if int(number_of_samples) == -1:
    count = 0
    present_list_oids = []
    while True:
        occured_time = time.time()
        prober_snmp()
        feedback_time = time.time()
        count = count + 1
        time.sleep(abs(time_of_sampling - feedback_time + occured_time))
else:
    present_list_oids = []
    for count in range (0, number_of_samples+1):
        occured_time = time.time()
        prober_snmp()
        feedback_time = time.time()
        time.sleep(abs(time_of_sampling - feedback_time + occured_time))



